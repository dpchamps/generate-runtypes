{
  "kind": "Listing",
  "data": {
    "modhash": "",
    "dist": 26,
    "children": [
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "[Previous thread](https://redd.it/gcyj1g)\n\n# Good day, /r/ProgrammingLanguages, and sorry for being late yet again!\n\n# The time has come for a quick look at the state of the community.\n\nHere's what's been happening since the last time we did this:\n\n* **We're now at over 40 thousand subscribers.** I don't remember the exact numbers from when I joined the team (on a different account, back then), but we've grown around tenfold since then. I am amazed and humbled by the excellent community that grew around this place. Thank you!\n* Our [Discord server](https://discord.gg/KsFxE3W) continues to grow, and we have over 650 members as of right now. We recently added a #hey-look channel for sharing progress, releases, livestreams, and other achievements. Earlier than that, we also got #beginners, a safe place for newcomers to PLT&amp;D to learn.\n* /u/jtmar rejoined the mod team, after having taken a bit of a break.\n\nThe epidemic hit pretty hard, and it shows in our traffic numbers:\n\nmonth | uniques | pageviews\n-- | -- | --\nMay\t| 26,392 |\t211,692\nApril | 24,629 | 201,970\nMarch | 25,508 | 173,169\nFebruary | 21,613 | 168,817\nJanuary | 19,403 | 136,831\nDecember | 16,806 | 146,819\nNovember | 16,745 | 150,053\n\nI hope that this community will continue being a welcoming and productive home for all your languages. Let's proceed to the usual.\n\n## How much progress have you made since last time? What new ideas have you stumbled upon, what old ideas have you abandoned? What new projects have you started? What are you working on?\n\nOnce again, feel free to share anything you've been working on, old or new, simple or complex, tiny or huge, whether you want to share and discuss it, or simply brag about it - or just about anything you feel like sharing! The monthly thread is the place for you to engage /r/ProgrammingLanguages on things that you might not have wanted to put up a post for - progress, ideas, maybe even a slick new chair you built in your garage. Share your projects and thoughts on other redditors' ideas, and most importantly, have a great and productive June!\n\n## Chat with us at #proglangdesign on Freenode, or on our [Discord server](https://discord.gg/KsFxE3W) (bridged to the IRC)!",
          "author_fullname": "t2_z1w9vsg",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "June 2020 monthly \"What are you working on?\" thread",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_gugxmo",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.94,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 46,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": "1ca7b952-b89e-11e6-99d0-0e9196c7f09c",
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 46,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1591029657,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://redd.it/gcyj1g\"&gt;Previous thread&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Good day, &lt;a href=\"/r/ProgrammingLanguages\"&gt;/r/ProgrammingLanguages&lt;/a&gt;, and sorry for being late yet again!&lt;/h1&gt;\n\n&lt;h1&gt;The time has come for a quick look at the state of the community.&lt;/h1&gt;\n\n&lt;p&gt;Here&amp;#39;s what&amp;#39;s been happening since the last time we did this:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;We&amp;#39;re now at over 40 thousand subscribers.&lt;/strong&gt; I don&amp;#39;t remember the exact numbers from when I joined the team (on a different account, back then), but we&amp;#39;ve grown around tenfold since then. I am amazed and humbled by the excellent community that grew around this place. Thank you!&lt;/li&gt;\n&lt;li&gt;Our &lt;a href=\"https://discord.gg/KsFxE3W\"&gt;Discord server&lt;/a&gt; continues to grow, and we have over 650 members as of right now. We recently added a #hey-look channel for sharing progress, releases, livestreams, and other achievements. Earlier than that, we also got #beginners, a safe place for newcomers to PLT&amp;amp;D to learn.&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"/u/jtmar\"&gt;/u/jtmar&lt;/a&gt; rejoined the mod team, after having taken a bit of a break.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The epidemic hit pretty hard, and it shows in our traffic numbers:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;month&lt;/th&gt;\n&lt;th&gt;uniques&lt;/th&gt;\n&lt;th&gt;pageviews&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;May&lt;/td&gt;\n&lt;td&gt;26,392&lt;/td&gt;\n&lt;td&gt;211,692&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;April&lt;/td&gt;\n&lt;td&gt;24,629&lt;/td&gt;\n&lt;td&gt;201,970&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;March&lt;/td&gt;\n&lt;td&gt;25,508&lt;/td&gt;\n&lt;td&gt;173,169&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;February&lt;/td&gt;\n&lt;td&gt;21,613&lt;/td&gt;\n&lt;td&gt;168,817&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;January&lt;/td&gt;\n&lt;td&gt;19,403&lt;/td&gt;\n&lt;td&gt;136,831&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;December&lt;/td&gt;\n&lt;td&gt;16,806&lt;/td&gt;\n&lt;td&gt;146,819&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;November&lt;/td&gt;\n&lt;td&gt;16,745&lt;/td&gt;\n&lt;td&gt;150,053&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;I hope that this community will continue being a welcoming and productive home for all your languages. Let&amp;#39;s proceed to the usual.&lt;/p&gt;\n\n&lt;h2&gt;How much progress have you made since last time? What new ideas have you stumbled upon, what old ideas have you abandoned? What new projects have you started? What are you working on?&lt;/h2&gt;\n\n&lt;p&gt;Once again, feel free to share anything you&amp;#39;ve been working on, old or new, simple or complex, tiny or huge, whether you want to share and discuss it, or simply brag about it - or just about anything you feel like sharing! The monthly thread is the place for you to engage &lt;a href=\"/r/ProgrammingLanguages\"&gt;/r/ProgrammingLanguages&lt;/a&gt; on things that you might not have wanted to put up a post for - progress, ideas, maybe even a slick new chair you built in your garage. Share your projects and thoughts on other redditors&amp;#39; ideas, and most importantly, have a great and productive June!&lt;/p&gt;\n\n&lt;h2&gt;Chat with us at #proglangdesign on Freenode, or on our &lt;a href=\"https://discord.gg/KsFxE3W\"&gt;Discord server&lt;/a&gt; (bridged to the IRC)!&lt;/h2&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": "new",
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": "The resident Python guy",
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": "moderator",
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "gugxmo",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "slavfox",
          "discussion_type": null,
          "num_comments": 90,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": "dark",
          "permalink": "/r/ProgrammingLanguages/comments/gugxmo/june_2020_monthly_what_are_you_working_on_thread/",
          "parent_whitelist_status": "all_ads",
          "stickied": true,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/gugxmo/june_2020_monthly_what_are_you_working_on_thread/",
          "subreddit_subscribers": 42498,
          "created_utc": 1591000857,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_695y5lr4",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Silq: The first intuitive programming language for quantum computers",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": "",
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hcnrk9",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.94,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 64,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": "Language announcement",
          "can_mod_post": false,
          "score": 64,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592694407,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "ethz.ch",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "link_flair_template_id": "6ba2e9aa-b74f-11e6-a5a4-0ee0011a4f78",
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hcnrk9",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "jsamwrites",
          "discussion_type": null,
          "num_comments": 4,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hcnrk9/silq_the_first_intuitive_programming_language_for/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://ethz.ch/en/news-and-events/eth-news/news/2020/06/the-first-intuitive-programming-language-for-quantum-computers.html",
          "subreddit_subscribers": 42498,
          "created_utc": 1592665607,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "&gt; There is no implementation! I'll be working on it, but there isn't one yet.\n\nI don't know where to share this, so I thought that this community might respond and say something about my idea.\n\nI've come up with an idea for language that is based around moving and transforming data. I think it is easier to understand what I mean with examples:\n```\n// Outputs a greeting to stdout. No, void isn't the return type.\nmain -&gt; void -&gt; \"Hello, World!\" -&gt; stdout;\n\n// There are no types. There might be ¯\\_(ツ)_/¯ \nmain\n  -&gt; .\n  -&gt; [ ., .0, .1 ] \n  -&gt; tail \n  -&gt; map { (. -&gt; to_number), 1 } .\n  -&gt; @Add;\n```\n\n`.` Represents this\n\n`'.' number` Is index in a list\n\n`tail` Does what it would do in most languages. There's also head.\n\nCode in `{}` is a block. So it is a `transformer` (or something I have no idea how to name this) Useful for things like `map`\n\n`()` Are the same as in most languages. So not `1 + 1 * 2`, but `(1 + 1) * 2`.\n\n---\n\nHere's the github repo with more examples:\n[Bear](https://github.com/somerandomdev49/Bear)\n\n&gt; Sorry for my english :)",
          "author_fullname": "t2_1uyd2xit",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "A Language for transforming data with arrows",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": "",
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hcr5hl",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 7,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": "Requesting criticism",
          "can_mod_post": false,
          "score": 7,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": 1592677739,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592706312,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;There is no implementation! I&amp;#39;ll be working on it, but there isn&amp;#39;t one yet.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&amp;#39;t know where to share this, so I thought that this community might respond and say something about my idea.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve come up with an idea for language that is based around moving and transforming data. I think it is easier to understand what I mean with examples:\n```\n// Outputs a greeting to stdout. No, void isn&amp;#39;t the return type.\nmain -&amp;gt; void -&amp;gt; &amp;quot;Hello, World!&amp;quot; -&amp;gt; stdout;&lt;/p&gt;\n\n&lt;p&gt;// There are no types. There might be ¯_(ツ)_/¯ \nmain\n  -&amp;gt; .\n  -&amp;gt; [ ., .0, .1 ] \n  -&amp;gt; tail \n  -&amp;gt; map { (. -&amp;gt; to_number), 1 } .\n  -&amp;gt; @Add;\n```&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.&lt;/code&gt; Represents this&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;#39;.&amp;#39; number&lt;/code&gt; Is index in a list&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;tail&lt;/code&gt; Does what it would do in most languages. There&amp;#39;s also head.&lt;/p&gt;\n\n&lt;p&gt;Code in &lt;code&gt;{}&lt;/code&gt; is a block. So it is a &lt;code&gt;transformer&lt;/code&gt; (or something I have no idea how to name this) Useful for things like &lt;code&gt;map&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;()&lt;/code&gt; Are the same as in most languages. So not &lt;code&gt;1 + 1 * 2&lt;/code&gt;, but &lt;code&gt;(1 + 1) * 2&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Here&amp;#39;s the github repo with more examples:\n&lt;a href=\"https://github.com/somerandomdev49/Bear\"&gt;Bear&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Sorry for my english :)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "link_flair_template_id": "662631ee-b74f-11e6-9ee2-0eb3295caa78",
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hcr5hl",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "somerandomdev49",
          "discussion_type": null,
          "num_comments": 5,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hcr5hl/a_language_for_transforming_data_with_arrows/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hcr5hl/a_language_for_transforming_data_with_arrows/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592677512,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "Is this an ok place to be posting this? It isn't PL design, but it is PL theory.\n\nI had a go at implementing the basic idea of https://github.com/ocamllabs/higher in SML. The lack of several language features means this is really more of a fun bit of trickery than anything that should ever be used. If you think I've missed something and there's a nicer way to do this then please let me know! Here's my code:\n\nhttps://github.com/mmcqd/higher-standard\n\nEdit: I thought of a much nicer design for using type classes, so this might actually approach being usable now :)",
          "author_fullname": "t2_a50e9",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "A small (unsafe, impractical) implementation of higher kinded polymorphism in Standard ML",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hchno1",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.9,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 27,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 27,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": 1592699220,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592666019,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is this an ok place to be posting this? It isn&amp;#39;t PL design, but it is PL theory.&lt;/p&gt;\n\n&lt;p&gt;I had a go at implementing the basic idea of &lt;a href=\"https://github.com/ocamllabs/higher\"&gt;https://github.com/ocamllabs/higher&lt;/a&gt; in SML. The lack of several language features means this is really more of a fun bit of trickery than anything that should ever be used. If you think I&amp;#39;ve missed something and there&amp;#39;s a nicer way to do this then please let me know! Here&amp;#39;s my code:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/mmcqd/higher-standard\"&gt;https://github.com/mmcqd/higher-standard&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: I thought of a much nicer design for using type classes, so this might actually approach being usable now :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hchno1",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "MattCubed",
          "discussion_type": null,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hchno1/a_small_unsafe_impractical_implementation_of/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hchno1/a_small_unsafe_impractical_implementation_of/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592637219,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "Tridash 0.10 has been released, after a long wait since the 0.9 release in February. This version features:\n\n* **New WebAssembly backend**, complete with a runtime library and garbage collection. \n* **Simplified and optimized JavaScript backend**. The runtime node objects are done away with and replaced with a single state computation function generated by the compiler.\n* **Proper Boolean types**. `True` and `False` are actual Boolean values rather than synonyms for `1` and `0`.\n* **Clarified semantics**. Creating a second backend forced some aspects of the runtime behaviour to be specified whereas previously they were left up to the behaviour of the JavaScript backend.\n\nProject Page: &lt;https://alex-gutev.github.io/tridash/&gt;\n\nSource code: &lt;https://github.com/alex-gutev/tridash&gt;",
          "author_fullname": "t2_2lz4rss",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Tridash 0.10: New WebAssembly Backend",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hcgfwm",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 33,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 33,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": 1592661930,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592659598,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Tridash 0.10 has been released, after a long wait since the 0.9 release in February. This version features:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;New WebAssembly backend&lt;/strong&gt;, complete with a runtime library and garbage collection. &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Simplified and optimized JavaScript backend&lt;/strong&gt;. The runtime node objects are done away with and replaced with a single state computation function generated by the compiler.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proper Boolean types&lt;/strong&gt;. &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are actual Boolean values rather than synonyms for &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Clarified semantics&lt;/strong&gt;. Creating a second backend forced some aspects of the runtime behaviour to be specified whereas previously they were left up to the behaviour of the JavaScript backend.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Project Page: &lt;a href=\"https://alex-gutev.github.io/tridash/\"&gt;https://alex-gutev.github.io/tridash/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Source code: &lt;a href=\"https://github.com/alex-gutev/tridash\"&gt;https://github.com/alex-gutev/tridash&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hcgfwm",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "alex-gutev",
          "discussion_type": null,
          "num_comments": 4,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hcgfwm/tridash_010_new_webassembly_backend/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hcgfwm/tridash_010_new_webassembly_backend/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592630798,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "This may not be a strictly Programming Languages problem, but I am sure this is something that is implemented in some compilers; so I wanted to ask -\n\nIs there any way to automatically parse and categorize a C++ function by parallelizability? For eg as embarrassingly parallel or has a loop carried dependency and so on..\n\nIf that is not possible, is it possible to just detect which functions are embarrassingly parallel?",
          "author_fullname": "t2_12l6g9",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Parallelizability detection",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hcob1g",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 5,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 5,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": 1592673166,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592696373,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This may not be a strictly Programming Languages problem, but I am sure this is something that is implemented in some compilers; so I wanted to ask -&lt;/p&gt;\n\n&lt;p&gt;Is there any way to automatically parse and categorize a C++ function by parallelizability? For eg as embarrassingly parallel or has a loop carried dependency and so on..&lt;/p&gt;\n\n&lt;p&gt;If that is not possible, is it possible to just detect which functions are embarrassingly parallel?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hcob1g",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "daredevildas",
          "discussion_type": null,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hcob1g/parallelizability_detection/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hcob1g/parallelizability_detection/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592667573,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "I'm looking for a tutorial for implementing a simple implementation of a non-trivial CEK Machine in Java/Python/Scheme/Clojure. All I'm coming up with are math-notation-heavy papers / articles, or implementations in ML family languages (which are again notation heavy).\n\nThere isn't even a wikipedia page. I want to compile down a simple lisp variant to bytecode, and the implementation in SICP feels outdated, which is why I want to understand CEK as used by Pycket etc.\n\nI found [this implementation](https://gist.github.com/cheery/876bc2be5bf4f0859f3c) in Python but have failed to extend it to nested expressions - if someone could show me how to extend this to have an `Add` primitive that works on two expressions that can be any permutation/combination of constants/vars/expressions, that might be enough to put me on the correct path.",
          "author_fullname": "t2_kfxldsk",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Help - looking for more accessible literature on CEK machines",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": "",
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hcpdje",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 2,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": "Help",
          "can_mod_post": false,
          "score": 2,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592700155,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m looking for a tutorial for implementing a simple implementation of a non-trivial CEK Machine in Java/Python/Scheme/Clojure. All I&amp;#39;m coming up with are math-notation-heavy papers / articles, or implementations in ML family languages (which are again notation heavy).&lt;/p&gt;\n\n&lt;p&gt;There isn&amp;#39;t even a wikipedia page. I want to compile down a simple lisp variant to bytecode, and the implementation in SICP feels outdated, which is why I want to understand CEK as used by Pycket etc.&lt;/p&gt;\n\n&lt;p&gt;I found &lt;a href=\"https://gist.github.com/cheery/876bc2be5bf4f0859f3c\"&gt;this implementation&lt;/a&gt; in Python but have failed to extend it to nested expressions - if someone could show me how to extend this to have an &lt;code&gt;Add&lt;/code&gt; primitive that works on two expressions that can be any permutation/combination of constants/vars/expressions, that might be enough to put me on the correct path.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "link_flair_template_id": "ad8e1722-0da7-11e8-b50c-0e49cb833bf0",
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hcpdje",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "therealdivs1210",
          "discussion_type": null,
          "num_comments": 4,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hcpdje/help_looking_for_more_accessible_literature_on/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hcpdje/help_looking_for_more_accessible_literature_on/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592671355,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_54sitvo7",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Just released a parser for Zephyr's ASDL",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hcrcc5",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592707000,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "github.com",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hcrcc5",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "isidentical",
          "discussion_type": null,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hcrcc5/just_released_a_parser_for_zephyrs_asdl/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://github.com/isidentical/pyasdl",
          "subreddit_subscribers": 42498,
          "created_utc": 1592678200,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "I want to make a list of general-purpose (human-readable) programming languages that support infix operators and satisfy the property of “there are no precedence rules for infix operators”. For example, `1 + 2 * 3` will evaluate to `9`, not `7`.  \n  \nWhich languages (besides [IntercalScript](https://github.com/Storyyeller/IntercalScript) and languages mentioned [here](http://lambda-the-ultimate.org/node/2943) and [here](https://softwareengineering.stackexchange.com/questions/3425)) can be included in the list?",
          "author_fullname": "t2_5la87a4m",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Languages with no precedence rules for infix operators",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hclaqd",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.71,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 3,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 3,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592683890,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to make a list of general-purpose (human-readable) programming languages that support infix operators and satisfy the property of “there are no precedence rules for infix operators”. For example, &lt;code&gt;1 + 2 * 3&lt;/code&gt; will evaluate to &lt;code&gt;9&lt;/code&gt;, not &lt;code&gt;7&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;Which languages (besides &lt;a href=\"https://github.com/Storyyeller/IntercalScript\"&gt;IntercalScript&lt;/a&gt; and languages mentioned &lt;a href=\"http://lambda-the-ultimate.org/node/2943\"&gt;here&lt;/a&gt; and &lt;a href=\"https://softwareengineering.stackexchange.com/questions/3425\"&gt;here&lt;/a&gt;) can be included in the list?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hclaqd",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "uvwuwvvuwvwuwuvwvu",
          "discussion_type": null,
          "num_comments": 27,
          "send_replies": false,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hclaqd/languages_with_no_precedence_rules_for_infix/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hclaqd/languages_with_no_precedence_rules_for_infix/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592655090,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "I know very little about logic programming. I played with Prolog many years ago just to see what it what it was about and that's about it.\n\nOne doubt I've always had is: why logic programming is implemented by languages?\n\nIn my ignorance it felt like the resolution algorithms could have easily been implemented as libraries for other languages. You should be able to create an object in C, C++, python or whatever to which you add logic rules. This library resolves them and does what a logic programming language would do...\n\nProlog and similar languages feel to me like Domain Specific Languages: syntax sugar to work more easily with a logic resolution library.\n\nIs that the case, or am I saying something stupid?",
          "author_fullname": "t2_5suqnln7",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Logic programming languages: why are they languages, rather than libraries?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hc32v5",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.97,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 84,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 84,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592610577,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I know very little about logic programming. I played with Prolog many years ago just to see what it what it was about and that&amp;#39;s about it.&lt;/p&gt;\n\n&lt;p&gt;One doubt I&amp;#39;ve always had is: why logic programming is implemented by languages?&lt;/p&gt;\n\n&lt;p&gt;In my ignorance it felt like the resolution algorithms could have easily been implemented as libraries for other languages. You should be able to create an object in C, C++, python or whatever to which you add logic rules. This library resolves them and does what a logic programming language would do...&lt;/p&gt;\n\n&lt;p&gt;Prolog and similar languages feel to me like Domain Specific Languages: syntax sugar to work more easily with a logic resolution library.&lt;/p&gt;\n\n&lt;p&gt;Is that the case, or am I saying something stupid?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hc32v5",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "MrCodermann",
          "discussion_type": null,
          "num_comments": 25,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hc32v5/logic_programming_languages_why_are_they/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hc32v5/logic_programming_languages_why_are_they/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592581777,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "Is there any good small, fast and embedable scripting languages? Ones that supports method chaining would be prefered, as that allows for more natural flow. Functional programming features are also prefered, but I would like it to still be able to do mutations easily. Non lisps, especially curly brace ones would be prefered.\n\nFor existing languages, I know Lua is used a lot in the scripting language area, but the syntax is kind of verbose in scripting languages with all the `local`'s and `function`'s, and subscripting from 1 can be fairly annoying. Wren also seems like a good choice, but I feel there's too much classes in it. Any other suggestions?",
          "author_fullname": "t2_2m3y5ibk",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Small and fast embedable scripting languages?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hc8xl1",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.84,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 8,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 8,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592630409,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is there any good small, fast and embedable scripting languages? Ones that supports method chaining would be prefered, as that allows for more natural flow. Functional programming features are also prefered, but I would like it to still be able to do mutations easily. Non lisps, especially curly brace ones would be prefered.&lt;/p&gt;\n\n&lt;p&gt;For existing languages, I know Lua is used a lot in the scripting language area, but the syntax is kind of verbose in scripting languages with all the &lt;code&gt;local&lt;/code&gt;&amp;#39;s and &lt;code&gt;function&lt;/code&gt;&amp;#39;s, and subscripting from 1 can be fairly annoying. Wren also seems like a good choice, but I feel there&amp;#39;s too much classes in it. Any other suggestions?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hc8xl1",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "steven4012",
          "discussion_type": null,
          "num_comments": 30,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hc8xl1/small_and_fast_embedable_scripting_languages/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hc8xl1/small_and_fast_embedable_scripting_languages/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592601609,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "According [to debian shootouts](https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/fastest-more.svg) Lua and Python is 10-60x slower than C. Does anyone know if it's using a JIT compiler? I was wondering writing one but I'm not sure if I want to bother if it's in reality 100x slower without any optimizations/just in time compiler. My target is my phone and a pi",
          "author_fullname": "t2_6e31o9r9",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "How fast can interpreted code be?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hc5een",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.82,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 10,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 10,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592618193,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;According &lt;a href=\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/fastest-more.svg\"&gt;to debian shootouts&lt;/a&gt; Lua and Python is 10-60x slower than C. Does anyone know if it&amp;#39;s using a JIT compiler? I was wondering writing one but I&amp;#39;m not sure if I want to bother if it&amp;#39;s in reality 100x slower without any optimizations/just in time compiler. My target is my phone and a pi&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hc5een",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "IndependentDocument5",
          "discussion_type": null,
          "num_comments": 60,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hc5een/how_fast_can_interpreted_code_be/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hc5een/how_fast_can_interpreted_code_be/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592589393,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "I am currently producing LLVM IR from my compiler, mostly because of the optimizations available without any extra effort. However, my compiler also produces code that looks much like [this](https://godbolt.org/z/iTWKvE) example in C. Three heap allocations are combined into two, but not all the way into one. Is there some LLVM metadata I could add or alternative to `malloc` I could use that would allow this optimization to work more effectively? Has anyone solved this problem in another way? The reason I don't want to do this optimization in my compiler is because it only becomes clear after inlining the function call.",
          "author_fullname": "t2_5hx0965l",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "LLVM Combining Heap Allocations",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": "",
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hc7as7",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 2,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": "Discussion",
          "can_mod_post": false,
          "score": 2,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592624438,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am currently producing LLVM IR from my compiler, mostly because of the optimizations available without any extra effort. However, my compiler also produces code that looks much like &lt;a href=\"https://godbolt.org/z/iTWKvE\"&gt;this&lt;/a&gt; example in C. Three heap allocations are combined into two, but not all the way into one. Is there some LLVM metadata I could add or alternative to &lt;code&gt;malloc&lt;/code&gt; I could use that would allow this optimization to work more effectively? Has anyone solved this problem in another way? The reason I don&amp;#39;t want to do this optimization in my compiler is because it only becomes clear after inlining the function call.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "link_flair_template_id": "93811e06-0da7-11e8-a9a2-0e1129ea8e52",
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hc7as7",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "aldenkeshap",
          "discussion_type": null,
          "num_comments": 3,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hc7as7/llvm_combining_heap_allocations/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hc7as7/llvm_combining_heap_allocations/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592595638,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_12ajac",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Oil 0.8.pre6 - Pure Bash and C++",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hbj3um",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.98,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 54,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 54,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592530161,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "oilshell.org",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hbj3um",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "oilshell",
          "discussion_type": null,
          "num_comments": 13,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hbj3um/oil_08pre6_pure_bash_and_c/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "http://www.oilshell.org/blog/2020/06/release-0.8.pre6.html",
          "subreddit_subscribers": 42498,
          "created_utc": 1592501361,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "As far as I can see, there is no \"popular\" dependently typed language right now, that's in \"general use\", say as much as F# or maybe Ocaml.\n\nWhat do you think the reasons are for this? On paper, they seem awesome, but I have difficulty thinking about a lot of cases where I would use them. OK vector examples are cool, but how many more use cases are there like that? And at what cost?\n\nI'd like to hear your thoughts on this. I'm sure some of you are hard at work, resolving or researching some of these issues so I'm looking to get educated.\n\nThank you!",
          "author_fullname": "t2_51wft1dv",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Dependent types and usability?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hb6rn4",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.99,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 59,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 59,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592479795,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": true,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As far as I can see, there is no &amp;quot;popular&amp;quot; dependently typed language right now, that&amp;#39;s in &amp;quot;general use&amp;quot;, say as much as F# or maybe Ocaml.&lt;/p&gt;\n\n&lt;p&gt;What do you think the reasons are for this? On paper, they seem awesome, but I have difficulty thinking about a lot of cases where I would use them. OK vector examples are cool, but how many more use cases are there like that? And at what cost?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to hear your thoughts on this. I&amp;#39;m sure some of you are hard at work, resolving or researching some of these issues so I&amp;#39;m looking to get educated.&lt;/p&gt;\n\n&lt;p&gt;Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hb6rn4",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "--comedian--",
          "discussion_type": null,
          "num_comments": 76,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hb6rn4/dependent_types_and_usability/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hb6rn4/dependent_types_and_usability/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592450995,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_47ccwzdj",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Benchmarking 10 dynamic languages on array-heavy code",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hbrbs1",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.67,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "crosspost_parent_list": [
            {
              "approved_at_utc": null,
              "subreddit": "manool",
              "selftext": "(1 min read)\n\n---\n\nHello wonderful community,\n\nIn the previous post we discussed in detail [construction of Conway's Game of Life in MANOOL](https://www.reddit.com/r/ProgrammingLanguages/comments/h9ulvk/a_primer_on_the_programming_language_manool/).\n\nAs was my intention, I have implemented the same functionality in several other languages to compare run-time performance. Here are complete results:\n\nTestbed A\n--------------------------------------------------------------------------------------------------------------\n\n_CPU_:     Intel Xeon L5640 @2.26 GHz (2.80 GHz) &amp;mdash; Westmere-EP  \n_Kernel_:  2.6.32-042stab126.1 (CentOS 6 + OpenVZ)  \n_Distro_:  CentOS release 6.9 (Final) + vzkernel-2.6.32-042stab126.1 + CentOS release 6.10 (Final)\n\nLanguage + variant (translator) | Time (s) |  G    | Slowdown   | Translator + backend version-release\n------------------------------- | --------:| -----:| --------:  | --------------------------------------------\nC++ (g++)                       |   1.037  | 66000 |  **1.000** | 8.3.1-3.2.el6\nC++ (clang++)                   |   1.021  | 66000 |    0.985   | 3.4.2-4.el6 + 4.9.2-6.2.el6 (g++)\nPython 2                        |   3.204  |  1000 |  203.919   | 2.6.6-68.el6_10\nPython 3                        |   5.203  |  1000 |  331.146   | 3.4.10-4.el6\nPHP                             |   3.560  |  1000 |  226.577   | 5.3.3-50.el6_10\nPerl                            |   5.640  |  1000 |  358.959   | 5.10.1-144.el6\nRuby                            |  14.122  |  1000 |  898.797   | 1.8.7.374-5.el6\nJavaScript/ECMAScript           |   5.887  | 66000 |    5.677   | 0.10.48-3.el6 (node)\nTcl                             |   6.724  |   100 | 4279.499   | 8.5.7-6.el6\nLua (lua)                       | 141.703  | 66000 |  136.647   | 5.1.4-4.1.el6\nLua (luajit)                    |   4.319  | 66000 |    4.165   | 2.0.4-3.el6\nScheme (guile)                  |   6.176  |  1000 |  393.072   | 1.8.7-5.el6\nScheme (csc)                    |   0.671  |  1000 |   42.706   | 4.12.0-3.el6 + 8.3.1-3.2.el6 (gcc)\nMANOOL + AllocOpt=True          |   2.502  |  1000 |  159.240   | 0.5.0 (built with g++ 8.3.1-3.2.el6)\nMANOOL + AllocOpt=False         |   2.593  |  1000 |  165.032   | 0.5.0 (ditto)\n\nTestbed B\n--------------------------------------------------------------------------------------------------------------\n\n_CPU_:     Intel Celeron N3060 @1.60 GHz (2.48 GHz) &amp;mdash; Braswell  \n_Kernel_:  4.4.0-17134-Microsoft (Windows 10 + WSL)  \n_Distro_:  Windows 10 Home version 1803 build 17134.1130 + Ubuntu 18.04.4 LTS\n\nLanguage + variant (translator) | Time (s) |  G    | Slowdown   | Translator + backend version-release\n------------------------------- | --------:| -----:| --------:  | --------------------------------------------\nC++ (g++)                       |   1.946  | 66000 |  **1.000** | 7.5.0-3ubuntu1~18.04\nC++ (clang++)                   |   2.217  | 66000 |    1.139   | 1:6.0-1ubuntu2 + 7.5.0-3ubuntu1~18.04 (g++)\nPython 2                        |   3.733  |  1000 |  126.607   | 2.7.17-1~18.04ubuntu1\nPython 3                        |   5.309  |  1000 |  180.059   | 3.6.7-1~18.04\nPHP                             |   2.852  |  1000 |   96.728   | 7.2.24-0ubuntu0.18.04.6\nPerl                            |   6.768  |  1000 |  229.542   | 5.26.1-6ubuntu0.3\nRuby                            |   4.425  |  1000 |  150.077   | 2.5.1-1ubuntu1.6\nJavaScript/ECMAScript           |   8.522  | 66000 |    4.379   | 8.10.0~dfsg-2ubuntu0.4 (node)\nTcl                             |  10.571  |   100 | 3585.231   | 8.6.8+dfsg-3\nLua (lua)                       | 153.583  | 66000 |   78.922   | 5.3.3-1ubuntu0.18.04.1\nLua (luajit)                    |   6.274  | 66000 |    3.224   | 2.1.0~beta3+dfsg-5.1\nScheme (guile)                  |   1.233  |  1000 |   41.818   | 2.2.3+1-3ubuntu0.1\nScheme (csc)                    |   1.691  |  1000 |   57.351   | 4.12.0-0.3 + 7.5.0-3ubuntu1~18.04 (gcc)\nMANOOL + AllocOpt=True          |   3.882  |  1000 |  131.661   | 0.5.0 (built with g++ 7.5.0-3ubuntu1~18.04)\nMANOOL + AllocOpt=False         |   3.943  |  1000 |  133.730   | 0.5.0 (ditto)\n\nThe graph is [here](https://raw.githubusercontent.com/rusini/life10/master/Benchmarks.png), and the repository is on [GitHub](https://github.com/rusini/life10-benchmarks).\n\n*Have fun*",
              "author_fullname": "t2_47ccwzdj",
              "saved": false,
              "mod_reason_title": null,
              "gilded": 0,
              "clicked": false,
              "title": "Benchmarking 10 dynamic languages on array-heavy code",
              "link_flair_richtext": [],
              "subreddit_name_prefixed": "r/manool",
              "hidden": false,
              "pwls": null,
              "link_flair_css_class": null,
              "downs": 0,
              "top_awarded_type": null,
              "hide_score": false,
              "name": "t3_hbr87i",
              "quarantine": false,
              "link_flair_text_color": "dark",
              "upvote_ratio": 1,
              "author_flair_background_color": "transparent",
              "subreddit_type": "public",
              "ups": 9,
              "total_awards_received": 0,
              "media_embed": {},
              "author_flair_template_id": "f017c9fc-af95-11ea-ba45-0e418f9a6443",
              "is_original_content": false,
              "user_reports": [],
              "secure_media": null,
              "is_reddit_media_domain": false,
              "is_meta": false,
              "category": null,
              "secure_media_embed": {},
              "link_flair_text": null,
              "can_mod_post": false,
              "score": 9,
              "approved_by": null,
              "author_premium": false,
              "thumbnail": "",
              "edited": 1592531889,
              "author_flair_css_class": null,
              "author_flair_richtext": [],
              "gildings": {},
              "content_categories": null,
              "is_self": true,
              "mod_note": null,
              "created": 1592558178,
              "link_flair_type": "text",
              "wls": null,
              "removed_by_category": null,
              "banned_by": null,
              "author_flair_type": "text",
              "domain": "self.manool",
              "allow_live_comments": false,
              "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;(1 min read)&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Hello wonderful community,&lt;/p&gt;\n\n&lt;p&gt;In the previous post we discussed in detail &lt;a href=\"https://www.reddit.com/r/ProgrammingLanguages/comments/h9ulvk/a_primer_on_the_programming_language_manool/\"&gt;construction of Conway&amp;#39;s Game of Life in MANOOL&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;As was my intention, I have implemented the same functionality in several other languages to compare run-time performance. Here are complete results:&lt;/p&gt;\n\n&lt;h2&gt;Testbed A&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;CPU&lt;/em&gt;:     Intel Xeon L5640 @2.26 GHz (2.80 GHz) &amp;mdash; Westmere-EP&lt;br/&gt;\n&lt;em&gt;Kernel&lt;/em&gt;:  2.6.32-042stab126.1 (CentOS 6 + OpenVZ)&lt;br/&gt;\n&lt;em&gt;Distro&lt;/em&gt;:  CentOS release 6.9 (Final) + vzkernel-2.6.32-042stab126.1 + CentOS release 6.10 (Final)&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Language + variant (translator)&lt;/th&gt;\n&lt;th align=\"right\"&gt;Time (s)&lt;/th&gt;\n&lt;th align=\"right\"&gt;G&lt;/th&gt;\n&lt;th align=\"right\"&gt;Slowdown&lt;/th&gt;\n&lt;th&gt;Translator + backend version-release&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;C++ (g++)&lt;/td&gt;\n&lt;td align=\"right\"&gt;1.037&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;&lt;strong&gt;1.000&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;8.3.1-3.2.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;C++ (clang++)&lt;/td&gt;\n&lt;td align=\"right\"&gt;1.021&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;0.985&lt;/td&gt;\n&lt;td&gt;3.4.2-4.el6 + 4.9.2-6.2.el6 (g++)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Python 2&lt;/td&gt;\n&lt;td align=\"right\"&gt;3.204&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;203.919&lt;/td&gt;\n&lt;td&gt;2.6.6-68.el6_10&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Python 3&lt;/td&gt;\n&lt;td align=\"right\"&gt;5.203&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;331.146&lt;/td&gt;\n&lt;td&gt;3.4.10-4.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;PHP&lt;/td&gt;\n&lt;td align=\"right\"&gt;3.560&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;226.577&lt;/td&gt;\n&lt;td&gt;5.3.3-50.el6_10&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Perl&lt;/td&gt;\n&lt;td align=\"right\"&gt;5.640&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;358.959&lt;/td&gt;\n&lt;td&gt;5.10.1-144.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Ruby&lt;/td&gt;\n&lt;td align=\"right\"&gt;14.122&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;898.797&lt;/td&gt;\n&lt;td&gt;1.8.7.374-5.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;JavaScript/ECMAScript&lt;/td&gt;\n&lt;td align=\"right\"&gt;5.887&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;5.677&lt;/td&gt;\n&lt;td&gt;0.10.48-3.el6 (node)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Tcl&lt;/td&gt;\n&lt;td align=\"right\"&gt;6.724&lt;/td&gt;\n&lt;td align=\"right\"&gt;100&lt;/td&gt;\n&lt;td align=\"right\"&gt;4279.499&lt;/td&gt;\n&lt;td&gt;8.5.7-6.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Lua (lua)&lt;/td&gt;\n&lt;td align=\"right\"&gt;141.703&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;136.647&lt;/td&gt;\n&lt;td&gt;5.1.4-4.1.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Lua (luajit)&lt;/td&gt;\n&lt;td align=\"right\"&gt;4.319&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;4.165&lt;/td&gt;\n&lt;td&gt;2.0.4-3.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Scheme (guile)&lt;/td&gt;\n&lt;td align=\"right\"&gt;6.176&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;393.072&lt;/td&gt;\n&lt;td&gt;1.8.7-5.el6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Scheme (csc)&lt;/td&gt;\n&lt;td align=\"right\"&gt;0.671&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;42.706&lt;/td&gt;\n&lt;td&gt;4.12.0-3.el6 + 8.3.1-3.2.el6 (gcc)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;MANOOL + AllocOpt=True&lt;/td&gt;\n&lt;td align=\"right\"&gt;2.502&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;159.240&lt;/td&gt;\n&lt;td&gt;0.5.0 (built with g++ 8.3.1-3.2.el6)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;MANOOL + AllocOpt=False&lt;/td&gt;\n&lt;td align=\"right\"&gt;2.593&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;165.032&lt;/td&gt;\n&lt;td&gt;0.5.0 (ditto)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;h2&gt;Testbed B&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;CPU&lt;/em&gt;:     Intel Celeron N3060 @1.60 GHz (2.48 GHz) &amp;mdash; Braswell&lt;br/&gt;\n&lt;em&gt;Kernel&lt;/em&gt;:  4.4.0-17134-Microsoft (Windows 10 + WSL)&lt;br/&gt;\n&lt;em&gt;Distro&lt;/em&gt;:  Windows 10 Home version 1803 build 17134.1130 + Ubuntu 18.04.4 LTS&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Language + variant (translator)&lt;/th&gt;\n&lt;th align=\"right\"&gt;Time (s)&lt;/th&gt;\n&lt;th align=\"right\"&gt;G&lt;/th&gt;\n&lt;th align=\"right\"&gt;Slowdown&lt;/th&gt;\n&lt;th&gt;Translator + backend version-release&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;C++ (g++)&lt;/td&gt;\n&lt;td align=\"right\"&gt;1.946&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;&lt;strong&gt;1.000&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;7.5.0-3ubuntu1~18.04&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;C++ (clang++)&lt;/td&gt;\n&lt;td align=\"right\"&gt;2.217&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;1.139&lt;/td&gt;\n&lt;td&gt;1:6.0-1ubuntu2 + 7.5.0-3ubuntu1~18.04 (g++)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Python 2&lt;/td&gt;\n&lt;td align=\"right\"&gt;3.733&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;126.607&lt;/td&gt;\n&lt;td&gt;2.7.17-1~18.04ubuntu1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Python 3&lt;/td&gt;\n&lt;td align=\"right\"&gt;5.309&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;180.059&lt;/td&gt;\n&lt;td&gt;3.6.7-1~18.04&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;PHP&lt;/td&gt;\n&lt;td align=\"right\"&gt;2.852&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;96.728&lt;/td&gt;\n&lt;td&gt;7.2.24-0ubuntu0.18.04.6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Perl&lt;/td&gt;\n&lt;td align=\"right\"&gt;6.768&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;229.542&lt;/td&gt;\n&lt;td&gt;5.26.1-6ubuntu0.3&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Ruby&lt;/td&gt;\n&lt;td align=\"right\"&gt;4.425&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;150.077&lt;/td&gt;\n&lt;td&gt;2.5.1-1ubuntu1.6&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;JavaScript/ECMAScript&lt;/td&gt;\n&lt;td align=\"right\"&gt;8.522&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;4.379&lt;/td&gt;\n&lt;td&gt;8.10.0~dfsg-2ubuntu0.4 (node)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Tcl&lt;/td&gt;\n&lt;td align=\"right\"&gt;10.571&lt;/td&gt;\n&lt;td align=\"right\"&gt;100&lt;/td&gt;\n&lt;td align=\"right\"&gt;3585.231&lt;/td&gt;\n&lt;td&gt;8.6.8+dfsg-3&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Lua (lua)&lt;/td&gt;\n&lt;td align=\"right\"&gt;153.583&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;78.922&lt;/td&gt;\n&lt;td&gt;5.3.3-1ubuntu0.18.04.1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Lua (luajit)&lt;/td&gt;\n&lt;td align=\"right\"&gt;6.274&lt;/td&gt;\n&lt;td align=\"right\"&gt;66000&lt;/td&gt;\n&lt;td align=\"right\"&gt;3.224&lt;/td&gt;\n&lt;td&gt;2.1.0~beta3+dfsg-5.1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Scheme (guile)&lt;/td&gt;\n&lt;td align=\"right\"&gt;1.233&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;41.818&lt;/td&gt;\n&lt;td&gt;2.2.3+1-3ubuntu0.1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Scheme (csc)&lt;/td&gt;\n&lt;td align=\"right\"&gt;1.691&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;57.351&lt;/td&gt;\n&lt;td&gt;4.12.0-0.3 + 7.5.0-3ubuntu1~18.04 (gcc)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;MANOOL + AllocOpt=True&lt;/td&gt;\n&lt;td align=\"right\"&gt;3.882&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;131.661&lt;/td&gt;\n&lt;td&gt;0.5.0 (built with g++ 7.5.0-3ubuntu1~18.04)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;MANOOL + AllocOpt=False&lt;/td&gt;\n&lt;td align=\"right\"&gt;3.943&lt;/td&gt;\n&lt;td align=\"right\"&gt;1000&lt;/td&gt;\n&lt;td align=\"right\"&gt;133.730&lt;/td&gt;\n&lt;td&gt;0.5.0 (ditto)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;The graph is &lt;a href=\"https://raw.githubusercontent.com/rusini/life10/master/Benchmarks.png\"&gt;here&lt;/a&gt;, and the repository is on &lt;a href=\"https://github.com/rusini/life10-benchmarks\"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Have fun&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
              "likes": null,
              "suggested_sort": "new",
              "banned_at_utc": null,
              "view_count": null,
              "archived": false,
              "no_follow": true,
              "is_crosspostable": false,
              "pinned": false,
              "over_18": false,
              "all_awardings": [],
              "awarders": [],
              "media_only": false,
              "can_gild": false,
              "spoiler": false,
              "locked": false,
              "author_flair_text": "Project Lead",
              "treatment_tags": [],
              "visited": false,
              "removed_by": null,
              "num_reports": null,
              "distinguished": null,
              "subreddit_id": "t5_2rp7ns",
              "mod_reason_by": null,
              "removal_reason": null,
              "link_flair_background_color": "",
              "id": "hbr87i",
              "is_robot_indexable": true,
              "report_reasons": null,
              "author": "alex-manool",
              "discussion_type": null,
              "num_comments": 13,
              "send_replies": true,
              "whitelist_status": null,
              "contest_mode": false,
              "mod_reports": [],
              "author_patreon_flair": false,
              "author_flair_text_color": "dark",
              "permalink": "/r/manool/comments/hbr87i/benchmarking_10_dynamic_languages_on_arrayheavy/",
              "parent_whitelist_status": null,
              "stickied": false,
              "url": "https://www.reddit.com/r/manool/comments/hbr87i/benchmarking_10_dynamic_languages_on_arrayheavy/",
              "subreddit_subscribers": 6,
              "created_utc": 1592529378,
              "num_crossposts": 5,
              "media": null,
              "is_video": false
            }
          ],
          "created": 1592558568,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.manool",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hbrbs1",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "alex-manool",
          "discussion_type": null,
          "num_comments": 6,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "crosspost_parent": "t3_hbr87i",
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hbrbs1/benchmarking_10_dynamic_languages_on_arrayheavy/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "/r/manool/comments/hbr87i/benchmarking_10_dynamic_languages_on_arrayheavy/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592529768,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_okzh1",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Simpler accessibility rules in Ada - feedback requested!",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hbao9x",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.85,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 10,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 10,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "crosspost_parent_list": [
            {
              "approved_at_utc": null,
              "subreddit": "ada",
              "selftext": "",
              "author_fullname": "t2_ar17i",
              "saved": false,
              "mod_reason_title": null,
              "gilded": 0,
              "clicked": false,
              "title": "Simpler accessibility rules in Ada - feedback requested!",
              "link_flair_richtext": [],
              "subreddit_name_prefixed": "r/ada",
              "hidden": false,
              "pwls": 6,
              "link_flair_css_class": null,
              "downs": 0,
              "top_awarded_type": null,
              "hide_score": false,
              "name": "t3_hav8zh",
              "quarantine": false,
              "link_flair_text_color": "dark",
              "upvote_ratio": 1,
              "author_flair_background_color": null,
              "subreddit_type": "public",
              "ups": 16,
              "total_awards_received": 0,
              "media_embed": {},
              "author_flair_template_id": null,
              "is_original_content": false,
              "user_reports": [],
              "secure_media": null,
              "is_reddit_media_domain": false,
              "is_meta": false,
              "category": null,
              "secure_media_embed": {},
              "link_flair_text": null,
              "can_mod_post": false,
              "score": 16,
              "approved_by": null,
              "author_premium": false,
              "thumbnail": "",
              "edited": false,
              "author_flair_css_class": null,
              "author_flair_richtext": [],
              "gildings": {},
              "content_categories": null,
              "is_self": false,
              "mod_note": null,
              "created": 1592442033,
              "link_flair_type": "text",
              "wls": 6,
              "removed_by_category": null,
              "banned_by": null,
              "author_flair_type": "text",
              "domain": "github.com",
              "allow_live_comments": false,
              "selftext_html": null,
              "likes": null,
              "suggested_sort": null,
              "banned_at_utc": null,
              "view_count": null,
              "archived": false,
              "no_follow": false,
              "is_crosspostable": false,
              "pinned": false,
              "over_18": false,
              "all_awardings": [],
              "awarders": [],
              "media_only": false,
              "can_gild": false,
              "spoiler": false,
              "locked": false,
              "author_flair_text": null,
              "treatment_tags": [],
              "visited": false,
              "removed_by": null,
              "num_reports": null,
              "distinguished": null,
              "subreddit_id": "t5_2qi8f",
              "mod_reason_by": null,
              "removal_reason": null,
              "link_flair_background_color": "",
              "id": "hav8zh",
              "is_robot_indexable": true,
              "report_reasons": null,
              "author": "yannickmoy",
              "discussion_type": null,
              "num_comments": 0,
              "send_replies": true,
              "whitelist_status": "all_ads",
              "contest_mode": false,
              "mod_reports": [],
              "author_patreon_flair": false,
              "author_flair_text_color": null,
              "permalink": "/r/ada/comments/hav8zh/simpler_accessibility_rules_in_ada_feedback/",
              "parent_whitelist_status": "all_ads",
              "stickied": false,
              "url": "https://github.com/AdaCore/ada-spark-rfcs/pull/47",
              "subreddit_subscribers": 3786,
              "created_utc": 1592413233,
              "num_crossposts": 1,
              "media": null,
              "is_video": false
            }
          ],
          "created": 1592497474,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "github.com",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hbao9x",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "Fabien_C",
          "discussion_type": null,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "crosspost_parent": "t3_hav8zh",
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hbao9x/simpler_accessibility_rules_in_ada_feedback/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://github.com/AdaCore/ada-spark-rfcs/pull/47",
          "subreddit_subscribers": 42498,
          "created_utc": 1592468674,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_3itlr",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "PLDI 2020 is ongoing, and anyone can view the live streams",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hazedy",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.99,
          "author_flair_background_color": "",
          "subreddit_type": "public",
          "ups": 46,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 46,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": "",
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592454388,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "pldi20.sigplan.org",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": "Popr Language",
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hazedy",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "hackerfoo",
          "discussion_type": null,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": "dark",
          "permalink": "/r/ProgrammingLanguages/comments/hazedy/pldi_2020_is_ongoing_and_anyone_can_view_the_live/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://pldi20.sigplan.org/program/program-pldi-2020",
          "subreddit_subscribers": 42498,
          "created_utc": 1592425588,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "https://youtu.be/bB-N8YxMEaI\n\n\nKalaam was created as a part of an educational project to help my students under the age of 18 to understand programming through a different dimension. \n\nAs the development of Kalaam continues, expect advanced features and major bug fixes in the next version.\n\nAnyone with a smartphone or a computer can start coding in Kalaam.\n\nCheck out the language here: Kalaam.io\n\nTo stay updated with the project, share your ideas and suggestions, join Kalaam discord server:\nhttps://discord.com/invite/EMyA8TA",
          "author_fullname": "t2_2fvu02pl",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Kalaam - A Programming Language in Hindi",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": "",
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hantit",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.87,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 83,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": "Language announcement",
          "can_mod_post": false,
          "score": 83,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": 1592493786,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592414351,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://youtu.be/bB-N8YxMEaI\"&gt;https://youtu.be/bB-N8YxMEaI&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Kalaam was created as a part of an educational project to help my students under the age of 18 to understand programming through a different dimension. &lt;/p&gt;\n\n&lt;p&gt;As the development of Kalaam continues, expect advanced features and major bug fixes in the next version.&lt;/p&gt;\n\n&lt;p&gt;Anyone with a smartphone or a computer can start coding in Kalaam.&lt;/p&gt;\n\n&lt;p&gt;Check out the language here: Kalaam.io&lt;/p&gt;\n\n&lt;p&gt;To stay updated with the project, share your ideas and suggestions, join Kalaam discord server:\n&lt;a href=\"https://discord.com/invite/EMyA8TA\"&gt;https://discord.com/invite/EMyA8TA&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "link_flair_template_id": "6ba2e9aa-b74f-11e6-a5a4-0ee0011a4f78",
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hantit",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "MantyK",
          "discussion_type": null,
          "num_comments": 30,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hantit/kalaam_a_programming_language_in_hindi/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/hantit/kalaam_a_programming_language_in_hindi/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592385551,
          "num_crossposts": 1,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_6967a",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Tiny Structure Editors for Low, Low Prices! (Generating GUIs from toString Functions)",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_has7pz",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.99,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 20,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": "1ca7b952-b89e-11e6-99d0-0e9196c7f09c",
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 20,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592432959,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "people.cs.uchicago.edu",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": "Pikelet, Fathom",
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "has7pz",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "bjzaba",
          "discussion_type": null,
          "num_comments": 1,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": "dark",
          "permalink": "/r/ProgrammingLanguages/comments/has7pz/tiny_structure_editors_for_low_low_prices/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "http://people.cs.uchicago.edu/~rchugh/static/papers/vlhcc20-tse.pdf",
          "subreddit_subscribers": 42498,
          "created_utc": 1592404159,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_12ajac",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Go vs C#, Part 3: Compiler, Runtime, Type System, Modules, and Everything Else",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_handj8",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.81,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 9,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 9,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592412024,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "medium.com",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "handj8",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "oilshell",
          "discussion_type": null,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/handj8/go_vs_c_part_3_compiler_runtime_type_system/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://medium.com/servicetitan-engineering/go-vs-c-part-3-compiler-runtime-type-system-modules-and-everything-else-faa423dddb34",
          "subreddit_subscribers": 42498,
          "created_utc": 1592383224,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_4l7dam5f",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Segfault Podcast Ep 1: Programming Languages",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hask6w",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 1,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 3,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 3,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592434046,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "honestyisbest.com",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hask6w",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "cutculus",
          "discussion_type": null,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hask6w/segfault_podcast_ep_1_programming_languages/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://honestyisbest.com/segfault/2020/Jun/16/programming-languages",
          "subreddit_subscribers": 42498,
          "created_utc": 1592405246,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_4l7dam5f",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Understanding and Expressing Scalable Concurrency [PDF]",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_hagx88",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.93,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 11,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 11,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592384581,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "ccs.neu.edu",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "hagx88",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "cutculus",
          "discussion_type": null,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/hagx88/understanding_and_expressing_scalable_concurrency/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "http://www.ccs.neu.edu/home/turon/thesis.pdf",
          "subreddit_subscribers": 42498,
          "created_utc": 1592355781,
          "num_crossposts": 0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_tc4i2",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Michael Sperber - Concurrent ML - The One That Got Away - Code Mesh 2017",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_ha74ut",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.95,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 53,
          "total_awards_received": 0,
          "media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pf4VbP5q3P0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "author_flair_template_id": "1ca7b952-b89e-11e6-99d0-0e9196c7f09c",
          "is_original_content": false,
          "user_reports": [],
          "secure_media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "title": "Michael Sperber - Concurrent ML  - The One That Got Away - Code Mesh 2017",
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pf4VbP5q3P0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "version": "1.0",
              "author_name": "Erlang Solutions",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/pf4VbP5q3P0/hqdefault.jpg",
              "type": "video",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/user/ErlangSolutions"
            },
            "type": "youtube.com"
          },
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pf4VbP5q3P0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "media_domain_url": "https://www.redditmedia.com/mediaembed/ha74ut",
            "height": 338
          },
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 53,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592353202,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "youtube.com",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": "Spiral",
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "ha74ut",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "abstractcontrol",
          "discussion_type": null,
          "num_comments": 5,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": "dark",
          "permalink": "/r/ProgrammingLanguages/comments/ha74ut/michael_sperber_concurrent_ml_the_one_that_got/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.youtube.com/watch?v=pf4VbP5q3P0",
          "subreddit_subscribers": 42498,
          "created_utc": 1592324402,
          "num_crossposts": 0,
          "media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "title": "Michael Sperber - Concurrent ML  - The One That Got Away - Code Mesh 2017",
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/pf4VbP5q3P0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "version": "1.0",
              "author_name": "Erlang Solutions",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/pf4VbP5q3P0/hqdefault.jpg",
              "type": "video",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/user/ErlangSolutions"
            },
            "type": "youtube.com"
          },
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "",
          "author_fullname": "t2_tc4i2",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Most Popular Programming Languages 1965 - 2019",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_haq4oi",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.6,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Og847HVwRSI?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "height": 338
          },
          "author_flair_template_id": "1ca7b952-b89e-11e6-99d0-0e9196c7f09c",
          "is_original_content": false,
          "user_reports": [],
          "secure_media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "title": "Most Popular Programming Languages 1965 - 2019",
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Og847HVwRSI?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "version": "1.0",
              "author_name": "Data Is Beautiful",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/Og847HVwRSI/hqdefault.jpg",
              "type": "video",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/channel/UCkWbqlDAyJh2n8DN5X6NZyg"
            },
            "type": "youtube.com"
          },
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {
            "content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Og847HVwRSI?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
            "width": 600,
            "scrolling": false,
            "media_domain_url": "https://www.redditmedia.com/mediaembed/haq4oi",
            "height": 338
          },
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1592425532,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "youtube.com",
          "allow_live_comments": false,
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": "Spiral",
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "haq4oi",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "abstractcontrol",
          "discussion_type": null,
          "num_comments": 8,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": "dark",
          "permalink": "/r/ProgrammingLanguages/comments/haq4oi/most_popular_programming_languages_1965_2019/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.youtube.com/watch?v=Og847HVwRSI",
          "subreddit_subscribers": 42498,
          "created_utc": 1592396732,
          "num_crossposts": 0,
          "media": {
            "oembed": {
              "provider_url": "https://www.youtube.com/",
              "title": "Most Popular Programming Languages 1965 - 2019",
              "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Og847HVwRSI?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;",
              "thumbnail_width": 480,
              "height": 338,
              "width": 600,
              "version": "1.0",
              "author_name": "Data Is Beautiful",
              "provider_name": "YouTube",
              "thumbnail_url": "https://i.ytimg.com/vi/Og847HVwRSI/hqdefault.jpg",
              "type": "video",
              "thumbnail_height": 360,
              "author_url": "https://www.youtube.com/channel/UCkWbqlDAyJh2n8DN5X6NZyg"
            },
            "type": "youtube.com"
          },
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "ProgrammingLanguages",
          "selftext": "(6 min read)\n\n---\n\nHello wonderful community,\n\nIn today's post we'll construct and discuss a somewhat complete and practical example -- we'll implement the rules of [Conway's Game of Life] in [MANOOL] and play a bit with it. This example is good to demonstrate one of the most critical areas of the semantics of MANOOL: access to composite data and value/copy-on-write semantics (and performance). We'll use an unoptimized, straightforward state transition algorithm for this purpose. The universe is wrapped around, to have more fun with it. The example should also give you a taste of what constructing complex expressions in MANOOL looks like in practice (that is, an idea about how its streamlined syntax works in real life).\n\n[MANOOL]:                https://manool.org\n[Conway's Game of Life]: https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\n\nLet's represent the board (state) of the Game of Life in MANOOL program as an array of arrays, which is constructed by the following expression: `{array N of: array M of 0}`, where the compile-time parameters `N` and `M` specify height and width of the board, respectively. The parameters are defined by the construct that spans from `: let {N = 40; M = 80} in` down thru the matching `}` (in the same column 1 at the very end of the source, see below). The bindings for `N` and `M` are injected into the scope between the keyword `in` and the end of the expression.\n\nPlease take into account two facts about the syntax of MANOOL:\n  1. MANOOL is a free-form and case-sensitive language.\n  2. The construct `{array N of: array M of 0}` is equivalent to `{array N of {array M of 0}}` (up to abstract syntax tree), whereas `{...: let {...} in ...}` is equivalent to `{... {let {...} in ...}}`. Such syntactic transformations apply in all similar cases in MANOOL, so from now on I am going to refer to such fragments using rather a complete notation (e.g., `{let {...} in ...}`), for the sake of aesthetics. The `:`-notation helps to reduce the nesting depth of complex expressions both visually and mentally. There are other syntactic sugar equivalences in MANOOL, which we will not discuss in detail in this post for the sake of brevity.\n\nNote that although each cell can be only in one of the two states, _live_ and _dead_, we represent the state of each cell as an integral number, `1` (live) and `0` (dead), instead of a more compelling Boolean value (`True`/`False`), to simplify and speed up a little calculations for the transition function.\n\nAnother compile-time parameter is `G`, which specifies the number of generations our universe is to evolve before we display the state for the second time and is defined in a `let`-expression similar to the above. Yet another compile-time parameter is `AllocOpt`, which we'll discuss later. And of course, the example starts as usual by importing all bindings (for things like `if`, `Out`, etc.) from the standard library module `\"manool.org.18/std/0.5/all\"` into the scope after `in`, whereas `{extern ...}` itself denotes the imported module.\n\nNow let's define a procedure for displaying a board state:\n\n    ...\n    : let\n      { Display =\n        { proc { B } as\n          ...\n        }\n      }\n      in\n      ...\n      ...Display[B]...\n      ...\n    }\n\n  (see below the full code).\n\n_Procedures_ in MANOOL (called _functions_ in many other languages) are first-class values, which can be assigned to variables, passed as arguments, and returned as results of computations. Here we use a _&amp;lambda;-expression_ `{proc {...} as ...}` to construct a procedure value and bind the result to the identifier `Display` by using an instance of the `let`-expression we're already familiar with. By using an applicative expression `Display[...]`, we can apply one argument (represented by the parameter `B`) to this procedure. The body expression specified between `as` and the end of the &amp;lambda;-expression evaluates to the result of the procedure invocation (in this case the result is irrelevant, and we only care about side effects of such invocation). The semantics of MANOOL is based on &amp;lambda;-calculus computing primitives, and MANOOL uses the usual call-by-value (applicative-order) evaluation strategy. Note that MANOOL is dynamically (but strongly) typed -- no data types need to be assumed during compilation either for procedure parameters or return values.\n\nThe body of the procedure has two nested `for`-loops, `{for {I = Range[N]$} do ...}` and `{for {J = Range[M]$} do ...}`. The first loop, for instance, evaluates by evaluating the body expression specified between `do` and the end of the expression for all values specified by the range _view_ `Range[N]$`, which means here \"for all integral values between `0` and `N`, exclusive\". The values are assigned to the new local temporary variable `I` injected into the scope between `do` and the end of the expression, and the view expression is evaluated at compile-time here thanks to the special postfix operator `$`, to optimize things a little.\n\nThe expression `{do Out.WriteLine[] after ...}` expands to `{do ...; Out.WriteLine[]}`, and the later evaluates by evaluating all constituent subexpressions in sequence, one after one (thereby yielding the result of evaluation of `Out.WriteLine[]`). `{do ... after ...}` expressions supplement the `:`-notation and are useful at times to reduce the nesting depth as well or to express \"sandwich\" idioms. You can find, in fact, many such \"reverse evaluation order\" constructs in MANOOL code.\n\n`{if ... then ... else ...}` is a conditional expression. It evaluates by evaluating first the condition expression between `if` and `then` and then one of the two branches depending on whether the condition holds and producing the result of the whole expression. Here we access the element _i_, _j_ of the Game state by using a nearly conventional notation: `B[I; J]`. Array indexes are zero-based in MANOOL, and `B[I; J]` is equivalent to `B[I][J]` for any array of arrays `B` but strongly recommended due to performance considerations. `&lt;&gt;` is an infix operator and means \"not equal\". `\"*\"` and `\" \"` are string literals.\n\n`Out.Write[...]` and `Out.WriteLine[]` are used to display data and produce newlines on the standard output. Note that we could equally write `Write[Out; ...]` or just `{Write Out ...}` (similar to an S-expression notation). Expressions like that, where the _target_ evaluates to a first-class value, are known as _applicative_ expressions in MANOOL (as opposed to _special_ expressions).\n\nThe complete program is\n\n~~~\n-- life.mnl -- Conway's Game of Life in MANOOL (version 0.5)\n\n{ {extern \"manool.org.18/std/0.5/all\"} in\n: let { AllocOpt = True } in\n: let { N = 40; M = 80 } in\n: let { G = 1000 } in\n\n: let\n  { Display =\n    { proc { B } as\n    : for { I = Range[N]$ } do\n    : do Out.WriteLine[] after\n    : for { J = Range[M]$ } do\n      Out.Write[{if B[I; J] &lt;&gt; 0 then \"*\" else \" \"}]\n    }\n  }\n  in\n\n: var { B = {array N of: array M of 0} } in\n  -- initialization\n  B[19; 41] = 1\n  B[20; 40] = 1\n  B[21; 40] = 1\n  B[22; 40] = 1\n  B[22; 41] = 1\n  B[22; 42] = 1\n  B[22; 43] = 1\n  B[19; 44] = 1\n  -- end of initialization\n  Out.WriteLine[\"Before:\"]; Display[B]\n\n  { var { NextB = B } in\n  : repeat G do\n  : do\n    {if ~AllocOpt then (B = NextB)' else {assign B = NextB; NextB = B}'}%\n    after\n  : for { I = Range[N]$ } do\n  : var\n    { Up    = {if I &lt;&gt; 0 then I - 1 else (N - 1)$}\n      Down  = {if I &lt;&gt; (N - 1)$ then I + 1 else 0}\n    }\n    in\n  : for { J = Range[M]$ } do\n  : var\n    { Left  = {if J &lt;&gt; 0 then J - 1 else (M - 1)$}\n      Right = {if J &lt;&gt; (M - 1)$ then J + 1 else 0}\n    }\n    in\n  : var\n    { Count =\n      B[Up  ; Left ] +\n      B[Up  ; J    ] +\n      B[Up  ; Right] +\n      B[I   ; Right] +\n      B[Down; Right] +\n      B[Down; J    ] +\n      B[Down; Left ] +\n      B[I   ; Left ]\n    }\n    in\n    NextB[I; J] =\n    { if Count == 2 then B[I; J] else\n    : if Count == 3 then 1 else\n      0\n    }\n  }\n  Out.WriteLine[\"After \" G \" generations:\"]; Display[B]\n}\n~~~\n\nWe start the next section of our program by declaring the board variable `B`, initialized to an empty state (all-dead or all-`0`): `{var {B = ...} in ...}`. Then, we specify the initial board configuration by setting some cells as \"alive\" and display that configuration. Then, we declare an auxiliary board configuration `NextB` and initialize it to the primary board configuration, just to obtain the same grid layout (the individual cell states don't matter): `{var {NextB = B} in ...}`. `{repeat G do ...}` means \"evaluate the body expression `G` times\".\n\nThe main idea for calculation of transition function consists of calculating the next generation's state for each cell and storing it in `NextB`, separately from `B`. At the end of this process (i.e., at the end of each generation's iteration), the new state `NextB` is somehow transferred to the primary board `B`. Here, there are two options for MANOOL:\n  1. just assign `NextB` to `B`, in which case next time we start to touch `NextB` (on the next generation iteration), copying (and a bit expensive memory allocation) will happen; or\n  2. exchange the values of `B` and `NextB`, in  which case no such adverse effects will take place.\n\nI intend to use the present implementation to compare run-time performance with other programming languages, including those with pure referential storage model. For this reason, the second option would be more fair. However, I leave the possibility to use the more straightforward option (1) (and to measure the impact of that simpler approach). For that end, a little bit of metaprogramming magic is used. The expression `...%` is evaluated at compile-time and its result (which must represent a syntactic construct valid in the current context) is compiled as though it were originally part of the surrounding code. Remember the Boolean parameter `AllocOpt` above? Inside we have the conditional expression \"if *not* `AllocOpt` ...\" that evaluates to one or another variant of the code by using the _quotation_ postfix operator `'` (which is analogous to `quote` forms in Lisps). `{assign ...}` is a _parallel_ assignment expression in MANOOL, which is useful to exchange the values of two or more storage locations.\n\nNote that `+`, `-`, `==`, `&lt;&gt;`, and `=` in all contexts are considered in MANOOL to be infix operators obeying nearly conventional operator precedence and associativity rules. In some places, those operators denote polymorphic operations, which evaluate according to the dynamic type of the first argument. `Write` and `WriteLine` are also polymorphic operations in our program. Collectively, they are all just _symbols_ that happen to work like procedures.\n\nAt this point, the rest of the code should be more or less clear to you (assuming you understand the Game's transition rules). Note that the in-place element update `NextB[I; J] = ...` has in fact value/copy-on-write semantics in MANOOL (it expands roughly to `NextB = Repl[NextB!; I; J; ...]`, where `NextB!` is a _move-out_ expression). We finalize the program by displaying one more time the board configuration (that is, after `G` generations). That's it.\n\nYou can find the whole source code also at [GitHub]. You could play with it (without compiling or installing MANOOL) by using, for instance, the [online evaluator] (scroll down the output to see the whole result).\n\n[GitHub]:           https://github.com/rusini/life10/blob/master/life.mnl\n[online evaluator]: https://manool.org/eval\n\n---\n\nFor more information: https://manool.org\n\n*Take care*",
          "author_fullname": "t2_47ccwzdj",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "A primer on the programming language MANOOL: Conway's Game of Life",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/ProgrammingLanguages",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": "",
          "downs": 0,
          "top_awarded_type": null,
          "hide_score": false,
          "name": "t3_h9ulvk",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "upvote_ratio": 0.86,
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 34,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": "Blog post",
          "can_mod_post": false,
          "score": 34,
          "approved_by": null,
          "author_premium": false,
          "thumbnail": "",
          "edited": 1592290332,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1592303201,
          "link_flair_type": "text",
          "wls": 6,
          "removed_by_category": null,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.ProgrammingLanguages",
          "allow_live_comments": false,
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;(6 min read)&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Hello wonderful community,&lt;/p&gt;\n\n&lt;p&gt;In today&amp;#39;s post we&amp;#39;ll construct and discuss a somewhat complete and practical example -- we&amp;#39;ll implement the rules of &lt;a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"&gt;Conway&amp;#39;s Game of Life&lt;/a&gt; in &lt;a href=\"https://manool.org\"&gt;MANOOL&lt;/a&gt; and play a bit with it. This example is good to demonstrate one of the most critical areas of the semantics of MANOOL: access to composite data and value/copy-on-write semantics (and performance). We&amp;#39;ll use an unoptimized, straightforward state transition algorithm for this purpose. The universe is wrapped around, to have more fun with it. The example should also give you a taste of what constructing complex expressions in MANOOL looks like in practice (that is, an idea about how its streamlined syntax works in real life).&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s represent the board (state) of the Game of Life in MANOOL program as an array of arrays, which is constructed by the following expression: &lt;code&gt;{array N of: array M of 0}&lt;/code&gt;, where the compile-time parameters &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt; specify height and width of the board, respectively. The parameters are defined by the construct that spans from &lt;code&gt;: let {N = 40; M = 80} in&lt;/code&gt; down thru the matching &lt;code&gt;}&lt;/code&gt; (in the same column 1 at the very end of the source, see below). The bindings for &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt; are injected into the scope between the keyword &lt;code&gt;in&lt;/code&gt; and the end of the expression.&lt;/p&gt;\n\n&lt;p&gt;Please take into account two facts about the syntax of MANOOL:\n  1. MANOOL is a free-form and case-sensitive language.\n  2. The construct &lt;code&gt;{array N of: array M of 0}&lt;/code&gt; is equivalent to &lt;code&gt;{array N of {array M of 0}}&lt;/code&gt; (up to abstract syntax tree), whereas &lt;code&gt;{...: let {...} in ...}&lt;/code&gt; is equivalent to &lt;code&gt;{... {let {...} in ...}}&lt;/code&gt;. Such syntactic transformations apply in all similar cases in MANOOL, so from now on I am going to refer to such fragments using rather a complete notation (e.g., &lt;code&gt;{let {...} in ...}&lt;/code&gt;), for the sake of aesthetics. The &lt;code&gt;:&lt;/code&gt;-notation helps to reduce the nesting depth of complex expressions both visually and mentally. There are other syntactic sugar equivalences in MANOOL, which we will not discuss in detail in this post for the sake of brevity.&lt;/p&gt;\n\n&lt;p&gt;Note that although each cell can be only in one of the two states, &lt;em&gt;live&lt;/em&gt; and &lt;em&gt;dead&lt;/em&gt;, we represent the state of each cell as an integral number, &lt;code&gt;1&lt;/code&gt; (live) and &lt;code&gt;0&lt;/code&gt; (dead), instead of a more compelling Boolean value (&lt;code&gt;True&lt;/code&gt;/&lt;code&gt;False&lt;/code&gt;), to simplify and speed up a little calculations for the transition function.&lt;/p&gt;\n\n&lt;p&gt;Another compile-time parameter is &lt;code&gt;G&lt;/code&gt;, which specifies the number of generations our universe is to evolve before we display the state for the second time and is defined in a &lt;code&gt;let&lt;/code&gt;-expression similar to the above. Yet another compile-time parameter is &lt;code&gt;AllocOpt&lt;/code&gt;, which we&amp;#39;ll discuss later. And of course, the example starts as usual by importing all bindings (for things like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;Out&lt;/code&gt;, etc.) from the standard library module &lt;code&gt;&amp;quot;manool.org.18/std/0.5/all&amp;quot;&lt;/code&gt; into the scope after &lt;code&gt;in&lt;/code&gt;, whereas &lt;code&gt;{extern ...}&lt;/code&gt; itself denotes the imported module.&lt;/p&gt;\n\n&lt;p&gt;Now let&amp;#39;s define a procedure for displaying a board state:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;...\n: let\n  { Display =\n    { proc { B } as\n      ...\n    }\n  }\n  in\n  ...\n  ...Display[B]...\n  ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(see below the full code).&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Procedures&lt;/em&gt; in MANOOL (called &lt;em&gt;functions&lt;/em&gt; in many other languages) are first-class values, which can be assigned to variables, passed as arguments, and returned as results of computations. Here we use a &lt;em&gt;&amp;lambda;-expression&lt;/em&gt; &lt;code&gt;{proc {...} as ...}&lt;/code&gt; to construct a procedure value and bind the result to the identifier &lt;code&gt;Display&lt;/code&gt; by using an instance of the &lt;code&gt;let&lt;/code&gt;-expression we&amp;#39;re already familiar with. By using an applicative expression &lt;code&gt;Display[...]&lt;/code&gt;, we can apply one argument (represented by the parameter &lt;code&gt;B&lt;/code&gt;) to this procedure. The body expression specified between &lt;code&gt;as&lt;/code&gt; and the end of the &amp;lambda;-expression evaluates to the result of the procedure invocation (in this case the result is irrelevant, and we only care about side effects of such invocation). The semantics of MANOOL is based on &amp;lambda;-calculus computing primitives, and MANOOL uses the usual call-by-value (applicative-order) evaluation strategy. Note that MANOOL is dynamically (but strongly) typed -- no data types need to be assumed during compilation either for procedure parameters or return values.&lt;/p&gt;\n\n&lt;p&gt;The body of the procedure has two nested &lt;code&gt;for&lt;/code&gt;-loops, &lt;code&gt;{for {I = Range[N]$} do ...}&lt;/code&gt; and &lt;code&gt;{for {J = Range[M]$} do ...}&lt;/code&gt;. The first loop, for instance, evaluates by evaluating the body expression specified between &lt;code&gt;do&lt;/code&gt; and the end of the expression for all values specified by the range &lt;em&gt;view&lt;/em&gt; &lt;code&gt;Range[N]$&lt;/code&gt;, which means here &amp;quot;for all integral values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt;, exclusive&amp;quot;. The values are assigned to the new local temporary variable &lt;code&gt;I&lt;/code&gt; injected into the scope between &lt;code&gt;do&lt;/code&gt; and the end of the expression, and the view expression is evaluated at compile-time here thanks to the special postfix operator &lt;code&gt;$&lt;/code&gt;, to optimize things a little.&lt;/p&gt;\n\n&lt;p&gt;The expression &lt;code&gt;{do Out.WriteLine[] after ...}&lt;/code&gt; expands to &lt;code&gt;{do ...; Out.WriteLine[]}&lt;/code&gt;, and the later evaluates by evaluating all constituent subexpressions in sequence, one after one (thereby yielding the result of evaluation of &lt;code&gt;Out.WriteLine[]&lt;/code&gt;). &lt;code&gt;{do ... after ...}&lt;/code&gt; expressions supplement the &lt;code&gt;:&lt;/code&gt;-notation and are useful at times to reduce the nesting depth as well or to express &amp;quot;sandwich&amp;quot; idioms. You can find, in fact, many such &amp;quot;reverse evaluation order&amp;quot; constructs in MANOOL code.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;{if ... then ... else ...}&lt;/code&gt; is a conditional expression. It evaluates by evaluating first the condition expression between &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;then&lt;/code&gt; and then one of the two branches depending on whether the condition holds and producing the result of the whole expression. Here we access the element &lt;em&gt;i&lt;/em&gt;, &lt;em&gt;j&lt;/em&gt; of the Game state by using a nearly conventional notation: &lt;code&gt;B[I; J]&lt;/code&gt;. Array indexes are zero-based in MANOOL, and &lt;code&gt;B[I; J]&lt;/code&gt; is equivalent to &lt;code&gt;B[I][J]&lt;/code&gt; for any array of arrays &lt;code&gt;B&lt;/code&gt; but strongly recommended due to performance considerations. &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is an infix operator and means &amp;quot;not equal&amp;quot;. &lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; are string literals.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Out.Write[...]&lt;/code&gt; and &lt;code&gt;Out.WriteLine[]&lt;/code&gt; are used to display data and produce newlines on the standard output. Note that we could equally write &lt;code&gt;Write[Out; ...]&lt;/code&gt; or just &lt;code&gt;{Write Out ...}&lt;/code&gt; (similar to an S-expression notation). Expressions like that, where the &lt;em&gt;target&lt;/em&gt; evaluates to a first-class value, are known as &lt;em&gt;applicative&lt;/em&gt; expressions in MANOOL (as opposed to &lt;em&gt;special&lt;/em&gt; expressions).&lt;/p&gt;\n\n&lt;p&gt;The complete program is&lt;/p&gt;\n\n&lt;p&gt;~~~\n-- life.mnl -- Conway&amp;#39;s Game of Life in MANOOL (version 0.5)&lt;/p&gt;\n\n&lt;p&gt;{ {extern &amp;quot;manool.org.18/std/0.5/all&amp;quot;} in\n: let { AllocOpt = True } in\n: let { N = 40; M = 80 } in\n: let { G = 1000 } in&lt;/p&gt;\n\n&lt;p&gt;: let\n  { Display =\n    { proc { B } as\n    : for { I = Range[N]$ } do\n    : do Out.WriteLine[] after\n    : for { J = Range[M]$ } do\n      Out.Write[{if B[I; J] &amp;lt;&amp;gt; 0 then &amp;quot;*&amp;quot; else &amp;quot; &amp;quot;}]\n    }\n  }\n  in&lt;/p&gt;\n\n&lt;p&gt;: var { B = {array N of: array M of 0} } in\n  -- initialization\n  B[19; 41] = 1\n  B[20; 40] = 1\n  B[21; 40] = 1\n  B[22; 40] = 1\n  B[22; 41] = 1\n  B[22; 42] = 1\n  B[22; 43] = 1\n  B[19; 44] = 1\n  -- end of initialization\n  Out.WriteLine[&amp;quot;Before:&amp;quot;]; Display[B]&lt;/p&gt;\n\n&lt;p&gt;{ var { NextB = B } in\n  : repeat G do\n  : do\n    {if ~AllocOpt then (B = NextB)&amp;#39; else {assign B = NextB; NextB = B}&amp;#39;}%\n    after\n  : for { I = Range[N]$ } do\n  : var\n    { Up    = {if I &amp;lt;&amp;gt; 0 then I - 1 else (N - 1)$}\n      Down  = {if I &amp;lt;&amp;gt; (N - 1)$ then I + 1 else 0}\n    }\n    in\n  : for { J = Range[M]$ } do\n  : var\n    { Left  = {if J &amp;lt;&amp;gt; 0 then J - 1 else (M - 1)$}\n      Right = {if J &amp;lt;&amp;gt; (M - 1)$ then J + 1 else 0}\n    }\n    in\n  : var\n    { Count =\n      B[Up  ; Left ] +\n      B[Up  ; J    ] +\n      B[Up  ; Right] +\n      B[I   ; Right] +\n      B[Down; Right] +\n      B[Down; J    ] +\n      B[Down; Left ] +\n      B[I   ; Left ]\n    }\n    in\n    NextB[I; J] =\n    { if Count == 2 then B[I; J] else\n    : if Count == 3 then 1 else\n      0\n    }\n  }\n  Out.WriteLine[&amp;quot;After &amp;quot; G &amp;quot; generations:&amp;quot;]; Display[B]\n}\n~~~&lt;/p&gt;\n\n&lt;p&gt;We start the next section of our program by declaring the board variable &lt;code&gt;B&lt;/code&gt;, initialized to an empty state (all-dead or all-&lt;code&gt;0&lt;/code&gt;): &lt;code&gt;{var {B = ...} in ...}&lt;/code&gt;. Then, we specify the initial board configuration by setting some cells as &amp;quot;alive&amp;quot; and display that configuration. Then, we declare an auxiliary board configuration &lt;code&gt;NextB&lt;/code&gt; and initialize it to the primary board configuration, just to obtain the same grid layout (the individual cell states don&amp;#39;t matter): &lt;code&gt;{var {NextB = B} in ...}&lt;/code&gt;. &lt;code&gt;{repeat G do ...}&lt;/code&gt; means &amp;quot;evaluate the body expression &lt;code&gt;G&lt;/code&gt; times&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;The main idea for calculation of transition function consists of calculating the next generation&amp;#39;s state for each cell and storing it in &lt;code&gt;NextB&lt;/code&gt;, separately from &lt;code&gt;B&lt;/code&gt;. At the end of this process (i.e., at the end of each generation&amp;#39;s iteration), the new state &lt;code&gt;NextB&lt;/code&gt; is somehow transferred to the primary board &lt;code&gt;B&lt;/code&gt;. Here, there are two options for MANOOL:\n  1. just assign &lt;code&gt;NextB&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, in which case next time we start to touch &lt;code&gt;NextB&lt;/code&gt; (on the next generation iteration), copying (and a bit expensive memory allocation) will happen; or\n  2. exchange the values of &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;NextB&lt;/code&gt;, in  which case no such adverse effects will take place.&lt;/p&gt;\n\n&lt;p&gt;I intend to use the present implementation to compare run-time performance with other programming languages, including those with pure referential storage model. For this reason, the second option would be more fair. However, I leave the possibility to use the more straightforward option (1) (and to measure the impact of that simpler approach). For that end, a little bit of metaprogramming magic is used. The expression &lt;code&gt;...%&lt;/code&gt; is evaluated at compile-time and its result (which must represent a syntactic construct valid in the current context) is compiled as though it were originally part of the surrounding code. Remember the Boolean parameter &lt;code&gt;AllocOpt&lt;/code&gt; above? Inside we have the conditional expression &amp;quot;if &lt;em&gt;not&lt;/em&gt; &lt;code&gt;AllocOpt&lt;/code&gt; ...&amp;quot; that evaluates to one or another variant of the code by using the &lt;em&gt;quotation&lt;/em&gt; postfix operator &lt;code&gt;&amp;#39;&lt;/code&gt; (which is analogous to &lt;code&gt;quote&lt;/code&gt; forms in Lisps). &lt;code&gt;{assign ...}&lt;/code&gt; is a &lt;em&gt;parallel&lt;/em&gt; assignment expression in MANOOL, which is useful to exchange the values of two or more storage locations.&lt;/p&gt;\n\n&lt;p&gt;Note that &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;=&lt;/code&gt; in all contexts are considered in MANOOL to be infix operators obeying nearly conventional operator precedence and associativity rules. In some places, those operators denote polymorphic operations, which evaluate according to the dynamic type of the first argument. &lt;code&gt;Write&lt;/code&gt; and &lt;code&gt;WriteLine&lt;/code&gt; are also polymorphic operations in our program. Collectively, they are all just &lt;em&gt;symbols&lt;/em&gt; that happen to work like procedures.&lt;/p&gt;\n\n&lt;p&gt;At this point, the rest of the code should be more or less clear to you (assuming you understand the Game&amp;#39;s transition rules). Note that the in-place element update &lt;code&gt;NextB[I; J] = ...&lt;/code&gt; has in fact value/copy-on-write semantics in MANOOL (it expands roughly to &lt;code&gt;NextB = Repl[NextB!; I; J; ...]&lt;/code&gt;, where &lt;code&gt;NextB!&lt;/code&gt; is a &lt;em&gt;move-out&lt;/em&gt; expression). We finalize the program by displaying one more time the board configuration (that is, after &lt;code&gt;G&lt;/code&gt; generations). That&amp;#39;s it.&lt;/p&gt;\n\n&lt;p&gt;You can find the whole source code also at &lt;a href=\"https://github.com/rusini/life10/blob/master/life.mnl\"&gt;GitHub&lt;/a&gt;. You could play with it (without compiling or installing MANOOL) by using, for instance, the [online evaluator] (scroll down the output to see the whole result).&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;For more information: &lt;a href=\"https://manool.org\"&gt;https://manool.org&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Take care&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "awarders": [],
          "media_only": false,
          "link_flair_template_id": "c4d4a520-1547-11e8-8ece-0e651c1a4214",
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "treatment_tags": [],
          "visited": false,
          "removed_by": null,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2qi8m",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "h9ulvk",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "alex-manool",
          "discussion_type": null,
          "num_comments": 1,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/ProgrammingLanguages/comments/h9ulvk/a_primer_on_the_programming_language_manool/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/h9ulvk/a_primer_on_the_programming_language_manool/",
          "subreddit_subscribers": 42498,
          "created_utc": 1592274401,
          "num_crossposts": 5,
          "media": null,
          "is_video": false
        }
      }
    ],
    "after": "t3_h9ulvk",
    "before": null
  }
}
